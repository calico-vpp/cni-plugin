// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cnibackend.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	cnibackend.proto

It has these top-level messages:
	AddRequest
	ContainerSettings
	IPConfig
	AddReply
	DelRequest
	DelReply
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AddRequest struct {
	InterfaceName            string             `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Netns                    string             `protobuf:"bytes,2,opt,name=netns,proto3" json:"netns,omitempty"`
	DesiredHostInterfaceName string             `protobuf:"bytes,3,opt,name=desired_host_interface_name,json=desiredHostInterfaceName,proto3" json:"desired_host_interface_name,omitempty"`
	Settings                 *ContainerSettings `protobuf:"bytes,4,opt,name=settings" json:"settings,omitempty"`
	ContainerIps             []*IPConfig        `protobuf:"bytes,5,rep,name=container_ips,json=containerIps" json:"container_ips,omitempty"`
	ContainerRoutes          []string           `protobuf:"bytes,6,rep,name=container_routes,json=containerRoutes" json:"container_routes,omitempty"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (m *AddRequest) String() string            { return proto1.CompactTextString(m) }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptorCnibackend, []int{0} }

func (m *AddRequest) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *AddRequest) GetNetns() string {
	if m != nil {
		return m.Netns
	}
	return ""
}

func (m *AddRequest) GetDesiredHostInterfaceName() string {
	if m != nil {
		return m.DesiredHostInterfaceName
	}
	return ""
}

func (m *AddRequest) GetSettings() *ContainerSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *AddRequest) GetContainerIps() []*IPConfig {
	if m != nil {
		return m.ContainerIps
	}
	return nil
}

func (m *AddRequest) GetContainerRoutes() []string {
	if m != nil {
		return m.ContainerRoutes
	}
	return nil
}

type ContainerSettings struct {
	AllowIpForwarding bool  `protobuf:"varint,1,opt,name=allow_ip_forwarding,json=allowIpForwarding,proto3" json:"allow_ip_forwarding,omitempty"`
	Mtu               int32 `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (m *ContainerSettings) Reset()                    { *m = ContainerSettings{} }
func (m *ContainerSettings) String() string            { return proto1.CompactTextString(m) }
func (*ContainerSettings) ProtoMessage()               {}
func (*ContainerSettings) Descriptor() ([]byte, []int) { return fileDescriptorCnibackend, []int{1} }

func (m *ContainerSettings) GetAllowIpForwarding() bool {
	if m != nil {
		return m.AllowIpForwarding
	}
	return false
}

func (m *ContainerSettings) GetMtu() int32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

type IPConfig struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Gateway string `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (m *IPConfig) Reset()                    { *m = IPConfig{} }
func (m *IPConfig) String() string            { return proto1.CompactTextString(m) }
func (*IPConfig) ProtoMessage()               {}
func (*IPConfig) Descriptor() ([]byte, []int) { return fileDescriptorCnibackend, []int{2} }

func (m *IPConfig) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IPConfig) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

type AddReply struct {
	Successful        bool   `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	ErrorMessage      string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	HostInterfaceName string `protobuf:"bytes,3,opt,name=host_interface_name,json=hostInterfaceName,proto3" json:"host_interface_name,omitempty"`
	ContainerMac      string `protobuf:"bytes,4,opt,name=container_mac,json=containerMac,proto3" json:"container_mac,omitempty"`
}

func (m *AddReply) Reset()                    { *m = AddReply{} }
func (m *AddReply) String() string            { return proto1.CompactTextString(m) }
func (*AddReply) ProtoMessage()               {}
func (*AddReply) Descriptor() ([]byte, []int) { return fileDescriptorCnibackend, []int{3} }

func (m *AddReply) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *AddReply) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *AddReply) GetHostInterfaceName() string {
	if m != nil {
		return m.HostInterfaceName
	}
	return ""
}

func (m *AddReply) GetContainerMac() string {
	if m != nil {
		return m.ContainerMac
	}
	return ""
}

type DelRequest struct {
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Netns         string `protobuf:"bytes,2,opt,name=netns,proto3" json:"netns,omitempty"`
}

func (m *DelRequest) Reset()                    { *m = DelRequest{} }
func (m *DelRequest) String() string            { return proto1.CompactTextString(m) }
func (*DelRequest) ProtoMessage()               {}
func (*DelRequest) Descriptor() ([]byte, []int) { return fileDescriptorCnibackend, []int{4} }

func (m *DelRequest) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *DelRequest) GetNetns() string {
	if m != nil {
		return m.Netns
	}
	return ""
}

type DelReply struct {
	Successful   bool   `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *DelReply) Reset()                    { *m = DelReply{} }
func (m *DelReply) String() string            { return proto1.CompactTextString(m) }
func (*DelReply) ProtoMessage()               {}
func (*DelReply) Descriptor() ([]byte, []int) { return fileDescriptorCnibackend, []int{5} }

func (m *DelReply) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *DelReply) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto1.RegisterType((*AddRequest)(nil), "cni.AddRequest")
	proto1.RegisterType((*ContainerSettings)(nil), "cni.ContainerSettings")
	proto1.RegisterType((*IPConfig)(nil), "cni.IPConfig")
	proto1.RegisterType((*AddReply)(nil), "cni.AddReply")
	proto1.RegisterType((*DelRequest)(nil), "cni.DelRequest")
	proto1.RegisterType((*DelReply)(nil), "cni.DelReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CniDataplane service

type CniDataplaneClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelReply, error)
}

type cniDataplaneClient struct {
	cc *grpc.ClientConn
}

func NewCniDataplaneClient(cc *grpc.ClientConn) CniDataplaneClient {
	return &cniDataplaneClient{cc}
}

func (c *cniDataplaneClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := grpc.Invoke(ctx, "/cni.CniDataplane/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cniDataplaneClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelReply, error) {
	out := new(DelReply)
	err := grpc.Invoke(ctx, "/cni.CniDataplane/Del", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CniDataplane service

type CniDataplaneServer interface {
	Add(context.Context, *AddRequest) (*AddReply, error)
	Del(context.Context, *DelRequest) (*DelReply, error)
}

func RegisterCniDataplaneServer(s *grpc.Server, srv CniDataplaneServer) {
	s.RegisterService(&_CniDataplane_serviceDesc, srv)
}

func _CniDataplane_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CniDataplaneServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cni.CniDataplane/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CniDataplaneServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CniDataplane_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CniDataplaneServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cni.CniDataplane/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CniDataplaneServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CniDataplane_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cni.CniDataplane",
	HandlerType: (*CniDataplaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _CniDataplane_Add_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _CniDataplane_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cnibackend.proto",
}

func init() { proto1.RegisterFile("cnibackend.proto", fileDescriptorCnibackend) }

var fileDescriptorCnibackend = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x5e, 0x17, 0xba, 0xa5, 0x6f, 0x0d, 0x6b, 0x0d, 0x42, 0x11, 0x48, 0xa8, 0xca, 0x84, 0x28,
	0x97, 0x1e, 0xc2, 0x19, 0xa4, 0xd1, 0x0a, 0x91, 0xc3, 0x00, 0x05, 0x71, 0xe1, 0x12, 0x3c, 0xfb,
	0x35, 0xb3, 0x48, 0xec, 0x60, 0x3b, 0xaa, 0xfa, 0x5b, 0xb8, 0xf2, 0x43, 0x51, 0x3d, 0x27, 0x2d,
	0x4c, 0xdc, 0x76, 0x4a, 0xde, 0xf7, 0x7d, 0x7e, 0x7e, 0xef, 0x7b, 0x7e, 0x30, 0x61, 0x52, 0x5c,
	0x53, 0xf6, 0x03, 0x25, 0x5f, 0x34, 0x5a, 0x59, 0x45, 0x02, 0x26, 0x45, 0xf2, 0xeb, 0x18, 0xe0,
	0x92, 0xf3, 0x1c, 0x7f, 0xb6, 0x68, 0x2c, 0x79, 0x01, 0x0f, 0x85, 0xb4, 0xa8, 0xd7, 0x94, 0x61,
	0x21, 0x69, 0x8d, 0xf1, 0x60, 0x36, 0x98, 0x8f, 0xf2, 0xa8, 0x47, 0x3f, 0xd2, 0x1a, 0xc9, 0x63,
	0x18, 0x4a, 0xb4, 0xd2, 0xc4, 0xc7, 0x8e, 0xbd, 0x0d, 0xc8, 0x1b, 0x78, 0xc6, 0xd1, 0x08, 0x8d,
	0xbc, 0xb8, 0x51, 0xc6, 0x16, 0xff, 0x64, 0x0a, 0x9c, 0x36, 0xf6, 0x92, 0x0f, 0xca, 0xd8, 0xec,
	0xaf, 0xa4, 0x29, 0x84, 0x06, 0xad, 0x15, 0xb2, 0x34, 0xf1, 0x83, 0xd9, 0x60, 0x7e, 0x96, 0x3e,
	0x59, 0x30, 0x29, 0x16, 0x4b, 0x25, 0x2d, 0x15, 0x12, 0xf5, 0x17, 0xcf, 0xe6, 0xbd, 0x8e, 0xa4,
	0x10, 0xb1, 0x8e, 0x2e, 0x44, 0x63, 0xe2, 0xe1, 0x2c, 0x98, 0x9f, 0xa5, 0x91, 0x3b, 0x98, 0x7d,
	0x5e, 0x2a, 0xb9, 0x16, 0x65, 0x3e, 0xee, 0x35, 0x59, 0x63, 0xc8, 0x2b, 0x98, 0xec, 0xcf, 0x68,
	0xd5, 0x5a, 0x34, 0xf1, 0xc9, 0x2c, 0x98, 0x8f, 0xf2, 0xf3, 0x1e, 0xcf, 0x1d, 0x9c, 0x7c, 0x85,
	0xe9, 0x9d, 0xdb, 0xc9, 0x02, 0x1e, 0xd1, 0xaa, 0x52, 0x9b, 0x42, 0x34, 0xc5, 0x5a, 0xe9, 0x0d,
	0xd5, 0x5c, 0xc8, 0xd2, 0x19, 0x15, 0xe6, 0x53, 0x47, 0x65, 0xcd, 0xfb, 0x9e, 0x20, 0x13, 0x08,
	0x6a, 0xdb, 0x3a, 0xab, 0x86, 0xf9, 0xee, 0x37, 0x79, 0x0b, 0x61, 0x57, 0x1b, 0x89, 0xe1, 0x94,
	0x72, 0xae, 0xd1, 0x18, 0x6f, 0x75, 0x17, 0xee, 0x98, 0x92, 0x5a, 0xdc, 0xd0, 0xad, 0xb7, 0xb9,
	0x0b, 0x93, 0xdf, 0x03, 0x08, 0xdd, 0xd0, 0x9a, 0x6a, 0x4b, 0x9e, 0x03, 0x98, 0x96, 0x31, 0x34,
	0x66, 0xdd, 0x56, 0xbe, 0x8a, 0x03, 0x84, 0x5c, 0x40, 0x84, 0x5a, 0x2b, 0x5d, 0xd4, 0x68, 0x0c,
	0x2d, 0xd1, 0x27, 0x1b, 0x3b, 0xf0, 0xea, 0x16, 0xdb, 0xf5, 0xf4, 0xff, 0x91, 0x4d, 0x6f, 0xee,
	0xcc, 0xea, 0xe2, 0xd0, 0xf7, 0x9a, 0x32, 0x37, 0xb0, 0xd1, 0x81, 0xd1, 0x57, 0x94, 0x25, 0x19,
	0xc0, 0x0a, 0xab, 0xfb, 0x78, 0x5a, 0xc9, 0x27, 0x08, 0x5d, 0xaa, 0xfb, 0x6a, 0x38, 0xfd, 0x0e,
	0xe3, 0xa5, 0x14, 0x2b, 0x6a, 0x69, 0x53, 0x51, 0x89, 0xe4, 0x25, 0x04, 0x97, 0x9c, 0x93, 0x73,
	0xf7, 0x70, 0xf6, 0x0b, 0xf1, 0x34, 0xda, 0x03, 0x4d, 0xb5, 0x4d, 0x8e, 0x76, 0xc2, 0x15, 0x56,
	0x5e, 0xb8, 0x6f, 0xcf, 0x0b, 0xbb, 0x22, 0x93, 0xa3, 0x77, 0xa7, 0xdf, 0x86, 0x6e, 0xcf, 0xae,
	0x4f, 0xdc, 0xe7, 0xf5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x0a, 0x9c, 0x10, 0x82, 0x03,
	0x00, 0x00,
}
